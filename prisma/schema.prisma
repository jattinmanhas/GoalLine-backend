// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id               String            @id @default(uuid())
  username         String            @unique
  email            String            @unique
  password         String
  fullname         String?
  role             Role              @default(USER)
  image            String?
  mobileNo         String?
  isActive         Boolean           @default(true)
  createdDatetime  DateTime          @default(now())
  updatedBy        String?
  updatedDatetime  DateTime?
  isDeleted        Boolean           @default(false)
  userAuthSettings userAuthSettings?
  categories       Category[] // A User can create multiple categories
  products         Product[] // A User can create multiple products
  cartItem         CartItems[] // A user can have multiple products in cart
  userAddress      userAddress[]
  Blog             Blog[]
  order            Order[]

  @@index([username, email])
}

model userAddress {
  userAddressId Int      @id @default(autoincrement())
  userId        String
  user          user     @relation(fields: [userId], references: [id])
  street        String
  city          String
  state         String?
  postalCode    String
  country       String
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model userAuthSettings {
  id                              String    @id @default(uuid())
  user                            user      @relation(fields: [userId], references: [id])
  userId                          String    @unique
  loginRetryLimit                 Int       @default(0)
  loginReactiveTime               DateTime?
  resetPasswordToken              String?
  expiredTimeOfResetPasswordToken String?
  isDeleted                       Boolean   @default(false)
  createdDatetime                 DateTime  @default(now())
  updatedBy                       String?
  updatedDatetime                 DateTime?

  @@index([resetPasswordToken])
}

enum Role {
  USER
  ADMIN
}

model Category {
  category_id     String    @id @default(uuid())
  name            String    @db.VarChar(255)
  description     String?
  imageName       String?   @db.VarChar(255)
  eTag            String?   @db.VarChar(100)
  isDeleted       Boolean   @default(false)
  createdDatetime DateTime  @default(now())
  createdBy       String
  updatedBy       String?
  updatedDatetime DateTime?

  products Product[] // A category can have multiple Products
  creator  user      @relation(fields: [createdBy], references: [id])
  Blog     Blog[]
}

model Product {
  product_id      String    @id @default(uuid())
  category_id     String
  name            String    @db.VarChar(255)
  description     String?
  price           Decimal   @db.Decimal(10, 2)
  stock           Int       @default(0)
  Ratings         Decimal   @default(0.0) @db.Decimal(5, 1)
  tag             String?
  isDeleted       Boolean   @default(false)
  createdBy       String
  createdDatetime DateTime  @default(now())
  updatedBy       String?
  updatedDatetime DateTime?

  category  Category       @relation(fields: [category_id], references: [category_id])
  creator   user           @relation(fields: [createdBy], references: [id])
  images    ProductImage[]
  CartItems CartItems[]
}

model ProductImage {
  image_id   Int    @id @default(autoincrement())
  product_id String
  imageName  String @db.VarChar(255)
  eTag       String @db.VarChar(100)

  product Product @relation(fields: [product_id], references: [product_id])
}

model CartItems {
  cart_items_id Int       @id @default(autoincrement())
  user_id       String
  product_id    String
  user          user      @relation(fields: [user_id], references: [id])
  product       Product   @relation(fields: [product_id], references: [product_id])
  quantity      Int       @default(1)
  addedAt       DateTime? @default(now())

  @@unique([user_id, product_id])
}

model Blog {
  id          String    @id @default(uuid())
  title       String
  description String
  sections    Section[]
  mainImage   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category_id String
  category    Category  @relation(fields: [category_id], references: [category_id])
  author      user      @relation(fields: [authorId], references: [id])
  authorId    String
}

model Section {
  id        String  @id @default(uuid())
  heading   String // Smaller heading for each section
  paragraph String? // Paragraph content for the section
  order     Int // Order to display sections in sequence
  blog      Blog    @relation(fields: [blogId], references: [id])
  blogId    String
  image     Image? // Each section can have one image
}

model Image {
  id        String   @id @default(uuid())
  imageName String // URL of the image, potentially a signed URL if hosted on S3
  section   Section? @relation(fields: [sectionId], references: [id])
  sectionId String?  @unique
}

model Order {
  id           String       @id @default(uuid()) // Primary key
  createdAt    DateTime     @default(now()) // Timestamp
  updatedAt    DateTime?    @updatedAt
  status       String       // Status of the order, e.g., 'completed', 'pending', 'cancelled'
  totalAmount  Int          // Total order amount in cents
  currency     String       // Currency used for the order, e.g., 'usd'
  customerId   String       // Customer ID reference
  user         user         @relation(fields: [customerId], references: [id])
  
  // Relation Fields
  orderItems   OrderItem[]  // Related order items
  payment      Payment?     @relation("OrderPayment") // Relation name added

  @@map("Orders") // Optional: Map model to `orders` table in database
}

model Payment {
  id           String       @id @default(uuid()) // Primary key
  paymentId    String       @unique // Unique Stripe payment ID or another reference
  currency     String       // Currency, e.g., 'usd'
  status       String       // Payment status, e.g., 'succeeded', 'failed'
  createdAt    DateTime     @default(now()) // Payment creation timestamp
  updatedAt    DateTime     @updatedAt
  orderId      String?      @unique // Foreign key to Order

  // Relation Fields
  order        Order?       @relation("OrderPayment", fields: [orderId], references: [id])

  @@map("Payments") // Optional: Map model to `payments` table in database
}

model OrderItem {
  id        String @id @default(uuid()) // Primary key
  quantity  Int // Quantity of the product ordered
  productId String // Reference to product ID
  orderId   String // Foreign key to Order

  // Relation Fields
  order Order @relation(fields: [orderId], references: [id])

  @@map("OrderItems")
}
