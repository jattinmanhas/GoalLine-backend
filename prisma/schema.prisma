// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id               String            @id @default(uuid())
  username         String            @unique
  email            String            @unique
  password         String
  fullname         String?
  role             Role              @default(USER)
  moblileNo        String?
  isActive         Boolean           @default(true)
  createdDatetime  DateTime          @default(now())
  updatedBy        String?
  updatedDatetime  DateTime?
  isDeleted        Boolean           @default(false)
  userAuthSettings userAuthSettings?
  categories       Category[] // A User can create multiple categories
  products         Product[] // A User can create multiple products
  cart             Cart? // A user can have only one cart

  @@index([username, email])
}

model userAuthSettings {
  id                              String    @id @default(uuid())
  user                            user      @relation(fields: [userId], references: [id])
  userId                          String    @unique
  loginRetryLimit                 Int       @default(0)
  loginReactiveTime               DateTime?
  resetPasswordToken              String?
  expiredTimeOfResetPasswordToken String?
  isDeleted                       Boolean   @default(false)
  createdDatetime                 DateTime  @default(now())
  updatedBy                       String?
  updatedDatetime                 DateTime?

  @@index([resetPasswordToken])
}

enum Role {
  USER
  ADMIN
}

model Category {
  category_id     String    @id @default(uuid())
  name            String    @db.VarChar(255)
  description     String?
  imageName       String?   @db.VarChar(255)
  eTag            String?   @db.VarChar(100)
  isDeleted       Boolean   @default(false)
  createdDatetime DateTime  @default(now())
  createdBy       String
  updatedBy       String?
  updatedDatetime DateTime?

  products Product[] // A category can have multiple Products
  creator  user      @relation(fields: [createdBy], references: [id])
}

model Product {
  product_id      String    @id @default(uuid())
  category_id     String
  name            String    @db.VarChar(255)
  description     String?
  price           Decimal   @db.Decimal(10, 2)
  stock           Int       @default(0)
  Ratings         Decimal   @default(0.0) @db.Decimal(5, 1)
  isDeleted       Boolean   @default(false)
  createdBy       String
  createdDatetime DateTime  @default(now())
  updatedBy       String?
  updatedDatetime DateTime?

  category  Category       @relation(fields: [category_id], references: [category_id])
  creator   user           @relation(fields: [createdBy], references: [id])
  images    ProductImage[] // A product can have multiple images.
  CartItems CartItems[]
}

model ProductImage {
  image_id   Int    @id @default(autoincrement())
  product_id String
  imageName  String @db.VarChar(255)
  eTag       String @db.VarChar(100)

  product Product @relation(fields: [product_id], references: [product_id])
}

model Cart {
  cart_id   Int         @id @default(autoincrement())
  user_id   String      @unique
  user      user        @relation(fields: [user_id], references: [id])
  createdAt DateTime?   @default(now())
  updatedAt DateTime?
  items     CartItems[] // A cart can have multiple items
}

model CartItems {
  cart_items_id Int       @id @default(autoincrement())
  cart_id       Int
  cart          Cart      @relation(fields: [cart_id], references: [cart_id])
  product_id    String
  product       Product   @relation(fields: [product_id], references: [product_id])
  quantity      Int       @default(1)
  addedAt       DateTime? @default(now())
}
